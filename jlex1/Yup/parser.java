
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 29 04:59:45 IST 2019
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 29 04:59:45 IST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\022\002\000\002\012\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\006\000" +
    "\002\003\006\000\002\003\010\000\002\003\003\000\002" +
    "\004\012\000\002\004\010\000\002\004\006\000\002\004" +
    "\006\000\002\004\004\000\002\004\010\000\002\004\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\020\000" +
    "\002\017\007\000\002\020\014\000\002\021\007\000\002" +
    "\021\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\005\003\000\002\005\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\011\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\044\004\006\005\017\010\016\013\021\014" +
    "\007\020\033\027\025\033\013\034\023\035\022\036\005" +
    "\037\012\040\026\041\004\052\015\053\011\060\030\001" +
    "\002\000\004\011\176\001\002\000\004\006\175\001\002" +
    "\000\004\011\uffd9\001\002\000\004\011\uffd7\001\002\000" +
    "\004\011\162\001\002\000\004\050\127\001\002\000\004" +
    "\011\154\001\002\000\004\016\151\001\002\000\046\004" +
    "\006\005\017\010\016\012\001\013\021\014\007\020\033" +
    "\027\025\033\013\034\023\035\022\036\005\037\012\040" +
    "\026\041\004\052\015\053\011\060\030\001\002\000\004" +
    "\050\127\001\002\000\010\006\105\016\104\050\106\001" +
    "\002\000\004\011\uffd8\001\002\000\004\002\103\001\002" +
    "\000\004\011\uffda\001\002\000\004\006\102\001\002\000" +
    "\004\016\077\001\002\000\004\011\070\001\002\000\004" +
    "\011\uffdb\001\002\000\004\011\065\001\002\000\054\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\020\ufff6\027\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\060\ufff6\001\002\000\004\011\034\001\002\000\054\004" +
    "\ufffd\005\ufffd\006\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\020\ufffd\027\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\060\ufffd\001\002\000\054\004\ufffc\005\ufffc\006\ufffc\010" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\027\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\060\ufffc\001\002\000\004" +
    "\011\uffdc\001\002\000\004\010\035\001\002\000\004\016" +
    "\036\001\002\000\012\017\044\021\043\026\037\030\040" +
    "\001\002\000\034\006\uffd1\011\uffd1\022\061\023\062\024" +
    "\060\025\063\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\051\uffd1\001\002\000\024\006\uffd5\011\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\001\002\000\004\011\045\001\002\000\024\006\uffd3\011" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\051\uffd3\001\002\000\024\006\uffd4\011\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002" +
    "\000\024\006\uffd6\011\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000\004\062\046" +
    "\001\002\000\004\011\047\001\002\000\012\017\044\021" +
    "\043\026\037\030\040\001\002\000\004\011\051\001\002" +
    "\000\004\061\052\001\002\000\004\011\053\001\002\000" +
    "\044\004\006\005\017\010\016\013\021\014\007\020\033" +
    "\027\025\033\013\034\023\035\022\036\005\037\012\040" +
    "\026\041\004\052\015\053\011\060\030\001\002\000\046" +
    "\004\006\005\017\010\016\013\021\014\007\020\033\027" +
    "\025\033\013\034\023\035\022\036\005\037\012\040\026" +
    "\041\004\052\015\053\011\055\055\060\030\001\002\000" +
    "\054\004\uffec\005\uffec\006\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\020\uffec\027\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\052\uffec\053\uffec\054\uffec" +
    "\055\uffec\060\uffec\001\002\000\054\004\ufffe\005\ufffe\006" +
    "\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\020\ufffe\027\ufffe" +
    "\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\060\ufffe\001\002" +
    "\000\004\026\037\001\002\000\004\026\uffce\001\002\000" +
    "\004\026\uffd0\001\002\000\004\026\uffcf\001\002\000\004" +
    "\026\uffcd\001\002\000\024\006\uffd2\011\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\001\002" +
    "\000\004\010\066\001\002\000\004\006\067\001\002\000" +
    "\054\004\ufff8\005\ufff8\006\ufff8\010\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\020\ufff8\027\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\060\ufff8\001\002\000\012\004\006\005\017\013" +
    "\021\014\007\001\002\000\004\011\072\001\002\000\004" +
    "\010\073\001\002\000\004\016\074\001\002\000\012\017" +
    "\044\021\043\026\037\030\040\001\002\000\004\006\076" +
    "\001\002\000\054\004\ufff5\005\ufff5\006\ufff5\010\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\020\ufff5\027\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\060\ufff5\001\002\000\012\017\044" +
    "\021\043\026\037\030\040\001\002\000\004\006\101\001" +
    "\002\000\054\004\uffef\005\uffef\006\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\020\uffef\027\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\060\uffef\001\002\000\054\004\ufffb\005" +
    "\ufffb\006\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\020\ufffb" +
    "\027\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\060\ufffb" +
    "\001\002\000\004\002\uffff\001\002\000\012\017\044\021" +
    "\043\026\037\030\040\001\002\000\054\004\ufff1\005\ufff1" +
    "\006\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\020\ufff1\027" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\060\ufff1\001" +
    "\002\000\012\004\006\005\017\013\021\014\007\001\002" +
    "\000\004\011\120\001\002\000\004\051\111\001\002\000" +
    "\004\037\112\001\002\000\004\011\113\001\002\000\012" +
    "\004\006\005\017\013\021\014\007\001\002\000\004\011" +
    "\115\001\002\000\044\004\006\005\017\010\016\013\021" +
    "\014\007\020\033\027\025\033\013\034\023\035\022\036" +
    "\005\037\012\040\026\041\004\052\015\053\011\060\030" +
    "\001\002\000\046\004\006\005\017\006\117\010\016\013" +
    "\021\014\007\020\033\027\025\033\013\034\023\035\022" +
    "\036\005\037\012\040\026\041\004\052\015\053\011\060" +
    "\030\001\002\000\054\004\uffea\005\uffea\006\uffea\010\uffea" +
    "\012\uffea\013\uffea\014\uffea\020\uffea\027\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\060\uffea\001\002\000\004\010" +
    "\121\001\002\000\006\007\122\051\uffe8\001\002\000\012" +
    "\004\006\005\017\013\021\014\007\001\002\000\004\051" +
    "\uffe9\001\002\000\004\006\125\001\002\000\054\004\ufff3" +
    "\005\ufff3\006\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\020" +
    "\ufff3\027\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\060" +
    "\ufff3\001\002\000\044\004\006\005\017\010\016\013\021" +
    "\014\007\020\033\027\025\033\013\034\023\035\022\036" +
    "\005\037\012\040\026\041\004\052\015\053\011\060\030" +
    "\001\002\000\016\010\131\017\044\021\043\026\037\030" +
    "\040\033\132\001\002\000\016\042\141\043\142\044\135" +
    "\045\140\046\134\047\137\001\002\000\020\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002" +
    "\000\020\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\051\uffe5\001\002\000\020\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\051\uffe7\001\002\000\016\010" +
    "\uffe2\017\uffe2\021\uffe2\026\uffe2\030\uffe2\033\uffe2\001\002" +
    "\000\016\010\uffe4\017\uffe4\021\uffe4\026\uffe4\030\uffe4\033" +
    "\uffe4\001\002\000\016\010\131\017\044\021\043\026\037" +
    "\030\040\033\132\001\002\000\016\010\uffe1\017\uffe1\021" +
    "\uffe1\026\uffe1\030\uffe1\033\uffe1\001\002\000\016\010\uffe3" +
    "\017\uffe3\021\uffe3\026\uffe3\030\uffe3\033\uffe3\001\002\000" +
    "\016\010\uffe0\017\uffe0\021\uffe0\026\uffe0\030\uffe0\033\uffe0" +
    "\001\002\000\016\010\uffdf\017\uffdf\021\uffdf\026\uffdf\030" +
    "\uffdf\033\uffdf\001\002\000\004\051\144\001\002\000\044" +
    "\004\uffeb\005\uffeb\010\uffeb\013\uffeb\014\uffeb\020\uffeb\027" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\052\uffeb\053\uffeb\060\uffeb\001\002\000\046\004" +
    "\006\005\017\010\016\013\021\014\007\020\033\027\025" +
    "\033\013\034\023\035\022\036\005\037\012\040\026\041" +
    "\004\052\015\053\011\054\146\060\030\001\002\000\054" +
    "\004\uffee\005\uffee\006\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\020\uffee\027\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\060\uffee\001\002\000\004\012\150\001\002\000\004" +
    "\002\000\001\002\000\012\017\044\021\043\026\037\030" +
    "\040\001\002\000\004\006\153\001\002\000\054\004\ufff2" +
    "\005\ufff2\006\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\020" +
    "\ufff2\027\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\060" +
    "\ufff2\001\002\000\012\017\044\021\043\026\037\030\040" +
    "\001\002\000\004\006\156\001\002\000\054\004\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\020\ufff9" +
    "\027\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\060\ufff9" +
    "\001\002\000\044\004\006\005\017\010\016\013\021\014" +
    "\007\020\033\027\025\033\013\034\023\035\022\036\005" +
    "\037\012\040\026\041\004\052\015\053\011\060\030\001" +
    "\002\000\046\004\006\005\017\010\016\013\021\014\007" +
    "\020\033\027\025\033\013\034\023\035\022\036\005\037" +
    "\012\040\026\041\004\052\015\053\011\055\161\060\030" +
    "\001\002\000\054\004\uffed\005\uffed\006\uffed\010\uffed\012" +
    "\uffed\013\uffed\014\uffed\020\uffed\027\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\060\uffed\001\002\000\006\010\163" +
    "\034\164\001\002\000\004\016\172\001\002\000\004\016" +
    "\165\001\002\000\006\031\170\032\167\001\002\000\004" +
    "\006\171\001\002\000\004\006\uffdd\001\002\000\004\006" +
    "\uffde\001\002\000\054\004\ufff0\005\ufff0\006\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\020\ufff0\027\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\060\ufff0\001\002\000\012\017" +
    "\044\021\043\026\037\030\040\001\002\000\004\006\174" +
    "\001\002\000\054\004\ufff4\005\ufff4\006\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\020\ufff4\027\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\060\ufff4\001\002\000\054\004\ufffa" +
    "\005\ufffa\006\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\020" +
    "\ufffa\027\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\060" +
    "\ufffa\001\002\000\004\010\177\001\002\000\004\011\200" +
    "\001\002\000\012\017\044\021\043\026\037\030\040\001" +
    "\002\000\004\006\202\001\002\000\054\004\ufff7\005\ufff7" +
    "\006\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\020\ufff7\027" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\060\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\020\002\013\003\030\004\031\006\007\007" +
    "\023\012\017\020\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\055\004\031\006\007\007\023\020" +
    "\026\022\146\001\001\000\004\017\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\040\011\041\001\001\000\004\014\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\047\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\053\003\030" +
    "\004\031\006\007\007\023\020\026\001\001\000\014\003" +
    "\055\004\031\006\007\007\023\020\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\074\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\077\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\123\011\041\001\001\000\002\001\001\000\006\006" +
    "\106\021\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\113\001" +
    "\001\000\002\001\001\000\016\002\115\003\030\004\031" +
    "\006\007\007\023\020\026\001\001\000\014\003\055\004" +
    "\031\006\007\007\023\020\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\106\021" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\144\003\030\004\031\006\007\007" +
    "\023\020\026\001\001\000\010\010\132\011\041\016\127" +
    "\001\001\000\004\015\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\132\011\041\016\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\055\004\031\006\007\007\023\020\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\151\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\154\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\157\003\030\004\031\006\007" +
    "\007\023\020\026\001\001\000\014\003\055\004\031\006" +
    "\007\007\023\020\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\172\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\200\011" +
    "\041\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sym ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sym",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sym ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sym",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sym ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sym",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sym ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sym",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= INTEGER sym expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= NIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= STRINGVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value ::= FLOATPOINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value1 ::= STRINGARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value1 ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // com ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // com ::= EQUALTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // com ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // com ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // com ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // com ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // val ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // val ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // val ::= value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fl ::= type SPACE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fl ::= type SPACE ID COMMA fl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // f ::= ID OPENBR fl CLOSEBR RETURN SPACE type SPACE prog SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cond ::= OPENBR val com val CLOSEBR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // f ::= FOR SPACE ID EQUALS value SPACE TO SPACE value SPACE DO SPACE prog END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // f ::= WHILE cond prog END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // f ::= IF cond prog FI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decln ::= ARRAYID EQUALS value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decln ::= type SPACE ARRAYID EQUALS value1 SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decln ::= ID SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decln ::= IDENTIFIER EQUALS value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decln ::= ID EQUALS value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decln ::= type SPACE ID EQUALS value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decln ::= variable SPACE type SPACE ID EQUALS value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decln",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= f 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= READ SPACE ID SPACE value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= PRINT SPACE ID SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= RETURN SPACE value SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= decln 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= prog stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= prog NT$0 EOFILE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("Valid declaration"); System.exit(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

