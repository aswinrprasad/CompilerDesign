import java_cup.runtime.*;
import java.util.*;
init with {: :};
scan with {: return getScanner().next_token(); :};
terminal SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, NEXTL,EOFILE,CHAR,COM,SPACE,INT, DCHAR,DOUBLE,FLOAT,EQUAL,STR;
terminal UMINUS, LPAREN, RPAREN ;
terminal Integer NUMBER;
non terminal st, expr_list, expr_part,s,DECL , TYPE , EXP, EXPex, EXPstr, EXPno;
non terminal Integer    expr;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;

s::=expr_list {: System.out.println("Valid declaration"); System.exit(0);:} EOFILE | DECL {: System.out.println("Valid declaration"); System.exit(0);:} EOFILE ;

DECL ::= TYPE SPACE CHAR COM CHAR COM CHAR SEMI;
TYPE ::=INT | FLOAT | DOUBLE |DCHAR;

expr_list ::= expr_list expr_part
      | 
              expr_part NEXTL
      ;
expr_part ::= expr:e 
      {: System.out.println("= " + e); :} 
              SEMI              
      ;
expr      ::= expr:e1 PLUS expr:e2    
      {: RESULT = new Integer(e1.intValue() + e2.intValue()); :} 
      | 
              expr:e1 MINUS expr:e2    
              {: RESULT = new Integer(e1.intValue() - e2.intValue()); :} 
      | 
              expr:e1 TIMES expr:e2 
      {: RESULT = new Integer(e1.intValue() * e2.intValue()); :} 
      | 
              expr:e1 DIVIDE expr:e2 
      {: RESULT = new Integer(e1.intValue() / e2.intValue()); :} 
      | 
              expr:e1 MOD expr:e2 
      {: RESULT = new Integer(e1.intValue() % e2.intValue()); :} 
      | 
              NUMBER:n                 
      {: RESULT = n; :} 
      | 
              MINUS expr:e             
      {: RESULT = new Integer(0 - e.intValue()); :} 
      %prec UMINUS
      | 
              LPAREN expr:e RPAREN     
      {: RESULT = e; :} 
      ;
